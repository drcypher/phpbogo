<?php
/*
 */
namespace Bogo\Yii\Facebook;
use Bogo\Facebook\Connector;
use Bogo\Facebook\Model;
use Bogo\Facebook\Query;

/**
 * Facebook-related utility functions.
 *
 * @since 1.0
 * @package Components
 * @author Konstantinos Filios <konfilios@gmail.com>
 */
class Manager extends \CApplicationComponent
{
	/**
	 * Facebook Application Id.
	 * @var integer
	 */
	public $appId;

	/**
	 * Facebook application namespace.
	 * @var string
	 */
	public $appNamespace;

	/**
	 * Facebook application access token.
	 *
	 * Generated from appId and appSecret using
	 * https://graph.facebook.com/oauth/access_token?client_id=APP_ID&client_secret=APP_SECRET&grant_type=client_credentials
	 * @var string
	 */
	public $appAccessToken;

	/**
	 * Facebook call verification token.
	 *
	 * A random string generated by you which you exchange with facebook to verify certain
	 * graph api function such as application subscriptions, etc.
	 *
	 * <b>Note:</b> Verify token may be up to 64 characters long.
	 * @var string
	 */
	public $appVerifyToken;

	/**
	 * Facebook application secret.
	 *
	 * @var string
	 */
	public $appSecret;

	/**
	 * Real-time update callback route hit by facebook.
	 *
	 * @var string
	 */
	public $realtimeCallbackRoute = 'facebook/realtime';

	/**
	 * Required permissions.
	 *
	 * @var string[]
	 */
	public $requiredPermissions;

	/**
	 * Subscriptions for realtime updates.
	 *
	 * @var array[]
	 */
	public $realtimeSubscriptions;

	/**
	 * Create an object array representation.
	 *
	 * @param string $objectType Object type.
	 * @param string $objectTitle Object and page title.
	 * @param array $objectParams More object params.
	 * @return array
	 */
	public function createOpenGraphObject($objectType, $objectTitle, array $objectParams = array())
	{
		$finalParams = array(
			'fb:app_id' => $this->appId,
			'og:title' => $objectTitle,
			'og:url' => 'http://'.$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'],
			'og:type' => str_replace('_:', $this->appNamespace.':', $objectType),
		);

		// Append custom params by prefixing param names with app namespace
		foreach ($objectParams as $paramName=>$paramValue) {
			$paramName = str_replace('_:', $this->appNamespace.':', $paramName);

			$finalParams[$paramName] = $paramValue;
		}

		return array(
			'title' => $objectTitle,
			'prefixes' => array(
				'og' => 'http://ogp.me/ns#',
				'fb' => 'http://ogp.me/ns/fb#',
				$this->appNamespace => 'http://ogp.me/ns/fb/'.$this->appNamespace.'#',
			),
			'params'=> $finalParams
		);
	}

	private $connector;

	/**
	 *
	 * @return Connector\Standard
	 */
	public function getConnector()
	{
		if ($this->connector === null) {
			$settings = array(
				'appId' => $this->appId,
				'secret' => $this->appSecret,
				'fileUpload' => false, // optional
				'allowSignedRequest' => false, // optional, but should be set to false for non-canvas apps
			);

			$this->connector = new Connector\Standard($settings);

		}
		return $this->connector;
	}

	/**
	 * Session user id.
	 *
	 * @return string
	 */
	public function getMyUserId()
	{
		return $this->getConnector()->getUser();
	}

	/**
	 * Session user access token.
	 *
	 * @return string
	 */
	public function getMyAccessToken()
	{
		return $this->getConnector()->getAccessToken();
	}

	/**
	 *
	 * @return Model\User
	 */
	public function getMyProfile()
	{
		$result = $this->getConnector()->api('/me');
		return Model\User::createOne($result);
	}

	public function getMyPosts($filterWithLocation = false)
	{
		$uri = 'me/feed';
		if ($filterWithLocation) {
			$uri .= '?with=location';
		}

		return Model\PostCollection::createOne($this->getConnector()->api($uri));
	}

	public function queryFeed()
	{
		return new Query\Feed($this);
	}

	public function getLoginUrl()
	{
		return $this->getConnector()->getLoginUrl(array(
			'scope' => $this->requiredPermissions
		));
	}
}
